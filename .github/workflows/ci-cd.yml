name: CI/CD Pipeline - Build, Scan & Deploy to EKS

on:
  push:
    branches: [main, develop]
    paths:
      - 'microservices-demo/src/**'
      - 'k8s-manifests/**'
      - 'microservices-helm-chart/**'
      - '.github/workflows/**'
      - 'Dockerfile*'
      - '*.md'
  pull_request:
    branches: [main]
    paths:
      - 'microservices-demo/src/**'
      - 'k8s-manifests/**'
      - 'microservices-helm-chart/**'
      - '.github/workflows/**'
      - 'Dockerfile*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write
  actions: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  GHCR_REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-scan:
    name: Build Images & Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - frontend
          - cartservice
          - productcatalogservice
          - currencyservice
          - paymentservice
          - shippingservice
          - emailservice
          - checkoutservice
          - recommendationservice
          - adservice
          - loadgenerator
          - shoppingassistantservice
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image
      run: |
        if [ "${{ matrix.service }}" = "cartservice" ]; then
          cd microservices-demo/src/cartservice/src
        else
          cd microservices-demo/src/${{ matrix.service }}
        fi
        docker build -t $GHCR_REGISTRY/${{ github.repository_owner }}/microservices-${{ matrix.service }}:$IMAGE_TAG .
        docker tag $GHCR_REGISTRY/${{ github.repository_owner }}/microservices-${{ matrix.service }}:$IMAGE_TAG $GHCR_REGISTRY/${{ github.repository_owner }}/microservices-${{ matrix.service }}:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/microservices-${{ matrix.service }}:${{ env.IMAGE_TAG }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results-${{ matrix.service }}.sarif') != ''
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Check for HIGH/CRITICAL vulnerabilities
      continue-on-error: true
      run: |
        trivy image --exit-code 0 --severity HIGH,CRITICAL $GHCR_REGISTRY/${{ github.repository_owner }}/microservices-${{ matrix.service }}:$IMAGE_TAG

    - name: Push image to GHCR
      if: github.ref == 'refs/heads/main'
      run: |
        docker push $GHCR_REGISTRY/${{ github.repository_owner }}/microservices-${{ matrix.service }}:$IMAGE_TAG
        docker push $GHCR_REGISTRY/${{ github.repository_owner }}/microservices-${{ matrix.service }}:latest

  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Verify cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Update image tags in Helm values
      run: |
        sed -i "s/imageTag: latest/imageTag: $IMAGE_TAG/g" microservices-helm-chart/values.yaml
        sed -i "s/imageRegistry: matthewntsiful/imageRegistry: ghcr.io\/${{ github.repository_owner }}/g" microservices-helm-chart/values.yaml

    - name: Deploy with Helm
      run: |
        helm upgrade --install microservices ./microservices-helm-chart \
          --namespace microservices \
          --create-namespace \
          --wait \
          --timeout 10m \
          --set global.imageTag=$IMAGE_TAG \
          --set global.imageRegistry=ghcr.io/${{ github.repository_owner }}

    - name: Verify deployment
      run: |
        kubectl get pods -n microservices
        kubectl get svc -n microservices
        kubectl get ingress -n microservices

    - name: Run smoke tests
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=frontend -n microservices --timeout=300s
        
        # Get ingress URL
        INGRESS_URL=$(kubectl get ingress microservices-ingress -n microservices -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        if [ ! -z "$INGRESS_URL" ]; then
          echo "Testing application at: http://$INGRESS_URL"
          # Wait for ALB to be ready
          sleep 60
          curl -f http://$INGRESS_URL || echo "Application not yet ready"
        else
          echo "Ingress URL not available yet"
        fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-to-eks
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install kubectl and Helm
      run: |
        curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Rollback deployment
      run: |
        helm rollback microservices -n microservices
        kubectl rollout status deployment -n microservices --timeout=300s

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [build-and-scan, deploy-to-eks]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-to-eks.result == 'success'
      run: |
        echo "‚úÖ Deployment successful to EKS cluster: ${{ secrets.EKS_CLUSTER_NAME }}"
        echo "üöÄ Image tag: $IMAGE_TAG"
        echo "üîó Commit: ${{ github.sha }}"

    - name: Notify on failure
      if: needs.deploy-to-eks.result == 'failure' || needs.build-and-scan.result == 'failure'
      run: |
        echo "‚ùå Deployment failed for commit: ${{ github.sha }}"
        echo "üîç Check logs and security scan results"
        exit 1